import sys
import json
import urllib.request as urllib
import os
import xmltodict
import argparse
import markdown
import doc_generator as docgen
import nmap_parser as np
from http.server import HTTPServer, BaseHTTPRequestHandler

from io import BytesIO

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        if self.path == '/api/scans':
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b'API')
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b'WEB')

    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        body = self.rfile.read(content_length)
        self.send_response(200)
        self.end_headers()
        response = BytesIO()
        response.write(b'This is POST request. ')
        response.write(b'Received: ')
        response.write(body)
        self.wfile.write(response.getvalue())

results = {}
vulnerable_services = []
colors = {'High': 'FD6864', 'Medium': 'F8A102', 'Low': '34CDF9'}

def get_args():
    parser = argparse.ArgumentParser(description="Utility to create Markdown and Latex reports from .xml files generated by Nmap")
    parser.add_argument('--input', required=True, help='Input directory name', default="")
    parser.add_argument('--output', required=True, help='Output file name', default="")
    parser.add_argument('--ipfile', required=True, help='File with the scanned IP addresses or CIDR ranges', default="")
    parser.add_argument('--port', required=False, help='WebServer port', default=9123)
    args = parser.parse_args()
    return args

def main():

    args = get_args()

    nmap_command = ""
    start_date = ""
    raw_nmap = ""
    print("Reading files at directory {0}".format(args.input))
    for i, filename in enumerate(os.listdir(args.input)):
        if filename.find(".txt") != -1:
            f = open(args.input + "/" + filename)
            raw_nmap += f.read()
            f.close()
            continue
        print("\tReading file: {0}".format(filename))
        f = open(args.input + "/" + filename)
        xml_content = f.read()
        f.close()
        data = xmltodict.parse(xml_content)
        np.parse_results(data)
        if nmap_command == "" or start_date == "":
            nmap_command = np.parse_nmap_command(data['nmaprun']['@args'])
            start_date = data['nmaprun']['@startstr']

    print("Generating Reports:\n\tOutput file: {0}\n\tNmap commands: {1}\n\tStart date: {2}".format(args.output, nmap_command, start_date))
    latex_out = docgen.create_latex(nmap_command, start_date, args.output + ".tex", args.ipfile)
    md_out = docgen.create_markdown(nmap_command, start_date, args.output + ".md", args.ipfile, raw_nmap)
    html_out = docgen.create_html(md_out)
    json_out = docgen.create_json(nmap_command, start_date, args.output + ".json", args.ipfile, raw_nmap)
    docgen.save_file(latex_out, args.output + ".tex")
    docgen.save_file(md_out, args.output + ".md")
    docgen.save_file(html_out, args.output + ".html")
    docgen.save_file(json.dumps(json_out, indent=1), args.output + ".json")

    print("Done!")

    httpd = HTTPServer(('localhost', args.port), SimpleHTTPRequestHandler)
    httpd.serve_forever()
    #handler = http.server.SimpleHTTPRequestHandler
    #with socketserver.TCPServer(("", args.port), handler) as httpd:
    #    print("Server started at localhost:" + str(args.port))
    #    httpd.serve_forever()

if __name__ == "__main__":
    main()
