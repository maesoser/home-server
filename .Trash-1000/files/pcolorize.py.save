#!/usr/bin/python3

import sys
from PIL import Image
import numpy as np
import time
from random import shuffle
from itertools import product
from multiprocessing import Pool, RawArray

def listmap(x, inlist, outlist, inlistlen, outlistlen):
    x = inlist.index(x)
    n = vmap(x, 0, inlistlen, 0, outlistlen)
    return outlist[int(n)]

def vmap( x,  in_min,  in_max,  out_min,  out_max):
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

def getPalettes():
    palettes = []
    fo = open("colores", "r")
    lines = fo.readlines()
    fo.close()
    for line in lines:
        palette = []
        line = line.replace(" ","").replace("\n","")
        line = line.split(",")
        for color in line:
            palette.append(color)
        palettes.append(palette)
        del lines
        return palettes

def getFlushedPalette(palettes):
    shuffle(palettes)
    totalpalette = []
    for palette in palettes:
        for color in palette:
            totalpalette.append(color)
    return totalpalette

def getTotalPalette(palettes):
    totalpalette = []
    for palette in palettes:
        for color in palette:
            totalpalette.append(color)
    return totalpalette

def hex_to_rgb(value):
    #lv = len(value)
    return (int(value[0:2],16),int(value[2:4],16),int(value[4:6],16))
    #return tuple(int(value[i:i+lv/3], 16) for i in range(0, lv, lv/3))

def rgbpalette(palette):
    rgbpalette = np.zeros((len(palette), 3), dtype=np.uint8)
    n = 0
    print(palette)
    print(n)
    for color in palette:
        rgbpalette[n] = hex_to_rgb(color)
        n +=1
    return rgbpalette

def compute_row(array,greylist,Palette,inlistlen,outlistlen):
    for i in range(0,len(array)):
        array[i] = listmap(array[i],greylist,Palette,inlistlen,outlistlen)

inputfile = str(sys.argv[1])
mode = str(sys.argv[2])

inputfile = inputfile.replace("./","")
im = Image.open(inputfile)
width, height = im.size
pixels = np.asarray(im)

greylist = list(set(set(pixels.flatten())))
greylist.sort()
print(inputfile+"\t"+str(width)+"x"+str(height)+"\t"+str(len(greylist))+" colors")

palettes = getPalettes()
totalPalette = getTotalPalette(palettes)
flushedPalette = getFlushedPalette(palettes)

rgbPalette = rgbpalette(flushedPalette)
if mode == "flushed":
    rgbPalette = rgbpalette(totalPalette)

# outimg = np.zeros((width, height, 3), dtype=np.uint8)

X_shape = [height, width]
inlistlen = len(greylist)
outlistlen = len(flushedPalette)

from multiprocessing import Pool

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































pool = Pool()
output = pool.map(compute_row, (row for i, row in pixels.iterrows()))

image.fromarray(pixels).save("img_"+inputfile)

exit(0)
n = 0
for palette in palettes:
    outimg = np.zeros((width, height, 3), dtype=np.uint8)
    for x in range(0,width) :
        for y in range(0,height):
            pixel = pixels[x][y]
            color = listmap(pixel,greylist,palette)
            rgbcolor = hex_to_rgb(str(color))
            outimg[x][y][0] = rgbcolor[0]
            outimg[x][y][1] = rgbcolor[1]
            outimg[x][y][2] = rgbcolor[2]
            #print str(pixel) + " -> " + str(color) + " -> " + str(rgbcolor)
        n +=1
        Image.fromarray(outimg).save("c"+str(n)+"_"+inputfile)
