version: "2.4"

services:

  maxmind:
    container_name: maxmind
    restart: unless-stopped
    mem_limit: 128m
    build:
     context: ./containers/maxmind
     dockerfile: Dockerfile
    volumes:
     - ./data/maxmind:/data
    ports:
      - "9797:8080"

  hugo:
    container_name: hugo
    restart: unless-stopped
    mem_limit: 128m
    build:
     context: ./containers/hugo
     dockerfile: Dockerfile
    environment:
     - HUGO_THEME=parsa-hugo
     - HUGO_SOURCE=/hugo/
     - HUGO_BASEURL=hugo.souvlaki.cf
    volumes:
     - ./data/hugo/:/hugo/
     
  blog:
    container_name: blog
    restart: unless-stopped
    mem_limit: 128m
    build:
     context: ./containers/blog
     dockerfile: Dockerfile
    environment:
     - SERVER_HTTP_PORT=8080
     - SERVER_HTTPS_PORT=8443
    volumes:
     - ./config/blog/config.json:/config.json
     - ./config/blog/posts:/posts

  promrelay:
    container_name: promrelay
    restart: "no"
    mem_limit: 32m
    logging:
      options:
        max-size: "5m"
        max-file: "2"
    build:
     context: ./containers/promrelay
     dockerfile: Dockerfile
    ports:
      - "9292:9292/tcp"
    env_file:
      - ./secrets.env
    volumes:
      - ./data/promrelay:/data
    environment:
      - EXPOSED_PORT=9797
      - LISTEN_PORT=9292
      - OUTPUT_FILE=/data/promrelay.debug

  wstunn:
    container_name: wstunn
    restart: unless-stopped
    mem_limit: 16m
    build:
      context: ./containers/wstunn
      dockerfile: Dockerfile
    env_file:
      - ./secrets.env

  echo:
    container_name: echo
    restart: unless-stopped
    mem_limit: 16m
    logging:
      options:
        max-size: "5m"
        max-file: "2"
    build:
      context: ./containers/echo
      dockerfile: Dockerfile
    ports:
     - "1313:1313"
    volumes:
      - ./config/echo/:/data/
    environment:
      - SERVER_HTTP_PORT=8080
      - SERVER_HTTPS_PORT=8443
      - SERVER_KEY=/data/serverkey.pem
      - SERVER_CERT=/data/certificate.pem

  cloudflared:
    container_name: cloudflared
    restart: unless-stopped
    mem_limit: 128m
    cpu_count: 2
    logging:
      options:
        max-size: "5m"
        max-file: "2"
    build:
      context: ./containers/cloudflared
      dockerfile: Dockerfile
    ports:
      - "5053:5053/udp"
    volumes:
      - ./config/cloudflared/cert.pem:/etc/cloudflared/cert.pem
    environment:
      - TUNNEL_METRICS=0.0.0.0:4933
      - TUNNEL_METRICS_UPDATE_FREQ=5s
      - TUNNEL_DNS=true
      - TUNNEL_DNS_PORT=5053
      - TUNNEL_DNS_ADDRESS=0.0.0.0
      - NO_AUTOUPDATE=true
      - TUNNEL_LOGLEVEL=info
      - TUNNEL_TRANSPORT_LOGLEVEL=error
      - TUNNEL_HOSTNAME=souvlaki.cf
      - TUNNEL_URL=https://nginx:443
      - TUNNEL_ORIGIN_SERVER_NAME=souvlaki.cf
      - TUNNEL_ORIGIN_CERT=/etc/cloudflared/cert.pem
      - TUNNEL_COMPRESSION_LEVEL=3
    ports:
      - '5053:5053/udp'
    depends_on:
      - nginx

  nginx:
    image: nginx
    container_name: nginx
    mem_limit: 64m
    cpu_count: 2
    logging:
      options:
        max-size: "3m"
        max-file: "3"
    volumes:
     - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
     - ./data/nginx/:/data/
    ports:
     - "9191:80"
    command:
     - "nginx"
     - "-g"
     - "daemon off;"
    healthcheck:
     test: curl -k --fail https://127.0.0.1 || exit 1 
     interval: 5m
     timeout: 10s
     retries: 3
     start_period: 30s

  stocks:
    container_name: stocks
    mem_limit: 16m
    cpu_count: 1
    restart: unless-stopped
    build:
      context: ./containers/stocks
      dockerfile: Dockerfile
    volumes:
      - "./config/stocks/config.json:/stocks/config.json"
      - "./config/stocks/stocks.db:/stocks/stocks.db"

  docker_exporter:
    container_name: docker_exporter
    mem_limit: 16m
    cpu_count: 1
    restart: unless-stopped
    build:
      context: ./containers/docker_exporter
      dockerfile: Dockerfile
    ports:
      - "9134:9134/tcp"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  mariadb:
    image: linuxserver/mariadb
    container_name: mariadb
    restart: unless-stopped
    mem_limit: 256m
    cpu_count: 2
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    env_file:
      - ./secrets.env
    volumes:
      - ./config/mariadb:/config
      - ./data/mariadb/databases/:/config/databases/
      - ./data/mariadb/log/:/config/log/
    ports:
      - 3306:3306

  lychee:
    image: linuxserver/lychee
    container_name: lychee
    restart: unless-stopped
    mem_limit: 512m
    cpu_count: 2
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - VIRTUAL_HOST=lychee.souvlaki.cf
    volumes:
      - ./config/lychee:/config
      - ./data/lychee/log:/config/log
      - ./data/lychee/pictures:/pictures
    #ports:
    #  - 9080:80
    depends_on:
            - mariadb

  ping_exporter:
    container_name: ping_exporter
    mem_limit: 8m
    cpu_count: 2
    restart: unless-stopped
    build:
      context: ./containers/ping_exporter
      dockerfile: Dockerfile
    ports:
      - "9400:9400/tcp"

  trex:
    container_name: trex
    restart: unless-stopped
    cpu_count: 1
    mem_limit: 16m
    build:
      context: ./containers/trex
      dockerfile: Dockerfile
    env_file:
      - ./secrets.env

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    mem_limit: 256m
    cpu_count: 4
    restart: unless-stopped
    environment:
      - VIRTUAL_HOST=prometheus.loc
    ports:
      - '9090:9090/tcp'
    volumes:
      - './config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
      - './data/prometheus/:/prometheus/'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus/'
      - '--storage.tsdb.retention=93d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  virgin_exporter:
    container_name: virgin_exporter
    restart: unless-stopped
    cpu_count: 1
    mem_limit: 16m
    logging:
      options:
        max-size: "5m"
        max-file: "3"
    build:
      context: ./containers/virgin_exporter
      dockerfile: Dockerfile
    #ports:
    # - "9300:9300"
    environment:
     - VIRGIN_PORT=9300
    env_file:
     - ./secrets.env

  cf_exporter:
    container_name: cf_exporter
    restart: unless-stopped
    cpu_count: 1
    mem_limit: 32m
    logging:
      options:
        max-size: "5m"
        max-file: "3"
    ports:
     - "2112:2112"
    build:
      context: ./containers/cloudflare_exporter
      dockerfile: Dockerfile
    environment:
     - CF_DATASET=waf,http,workers
    env_file:
     - ./secrets.env

  pihole_exporter:
    container_name: pihole_exporter
    restart: unless-stopped
    cpu_count: 1
    mem_limit: 8m
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    build:
      context: ./containers/pihole_exporter
      dockerfile: Dockerfile
    environment:
     - PIHOLE_ADDR=pihole:80
    #ports:
    # - "9333:9333/tcp

  cotibot:
    container_name: cotibot
    restart: unless-stopped
    cpu_count: 1
    mem_limit: 2024m
    build:
      context: ./containers/cotibot
      dockerfile: Dockerfile
    env_file:
      - ./secrets.env
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
     - "./data/cotibot/temp/:/tmp/"
     - "./data/cotibot/tgdatabase.db:/app/tgdatabase.db"
    entrypoint:
     - '/usr/bin/python3'
     - '/app/cotibot.py'

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    mem_limit: 96m
    cpu_count: 4
    restart: unless-stopped
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "8080:80/tcp"
      - "443:443/tcp"
    environment:
      TZ: 'Europe/Madrid'
      # DNS1: '192.168.0.10#5053'
      # DNS2: '192.168.0.10#5053'
      VIRTUAL_HOST: 'pihole.souvlaki.cf'
    env_file:
      - ./secrets.env
    volumes:
       - './data/pihole/etc-pihole/:/etc/pihole/'
       - './data/pihole/etc-dnsmasq.d/:/etc/dnsmasq.d/'
    cap_add:
       - NET_ADMIN

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    mem_limit: 64m
    cpu_count: 4
    restart: unless-stopped
    healthcheck:
      test: curl --fail -s http://grafana:3000/ || exit 1
      interval: 10min
      timeout: 10s
      retries: 3
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - "./config/grafana/:/etc/grafana/provisioning/"
      - "./data/grafana/:/var/lib/grafana/"
    environment:
      - VIRTUAL_HOST=grafana.souvlaki.cf
      - GF_SERVER_DOMAIN=grafana.souvlaki.cf
      - GF_SERVER_ROOT_URL=http://grafana.souvlaki.cf
      - GF_INSTALL_PLUGINS=grafana-clock-panel,cloudflare-app,grafana-simple-json-datasource,grafana-piechart-panel
    env_file:
      - ./secrets.env
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

#  loki:
#    container_name: loki
#    image: grafana/loki
#    user: "1000:1000"
#    command: -config.file=/etc/loki/loki-local-config.yaml
#    cpu_count: 4
#    mem_limit: 512m
#    restart: unless-stopped
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./data/loki:/data/loki
#      - ./config/loki/config.yaml:/etc/loki/loki-local-config.yaml
#
#  promtail:
#    container_name: promtail
#    image: grafana/promtail
#    cpu_count: 1
#    mem_limit: 64m
#    restart: unless-stopped
#    volumes:
#      - ./config/promtail/config.yaml:/etc/promtail/config.yaml
#      - ./data/promtail/cf:/logs/cf:z
#    command: -config.file=/etc/promtail/config.yaml
#
#  logpull:
#    container_name: logpull
#    build:
#      context: ./containers/logpull
#      dockerfile: Dockerfile
#    cpu_count: 1
#    mem_limit: 64m
#    restart: unless-stopped
#    logging:
#      options:
#        max-size: "10m"
#        max-file: "3"
#    env_file:
#      - ./secrets.env
#    volumes:
#      - ./data/promtail/cf:/logs:z

  grafbck:
    container_name: grafbck
    build:
      context: ./containers/grafbck
      dockerfile: Dockerfile
    cpu_count: 1
    mem_limit: 64m
    restart: unless-stopped
    logging:
      options:
        max-size: "10m"
        max-file: "3"
    env_file:
      - ./secrets.env
    volumes:
      - ./config/grafbck:/dashboards
